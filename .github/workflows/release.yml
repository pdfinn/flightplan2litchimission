name: Go CI/CD

on:
  # Regular builds
  push:
    branches: [ "main" ]
    tags: ["v*"]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"
          
      - name: Build
        run: go build -v ./...
        
      - name: Test
        run: go test -v ./...

  release:
    runs-on: ubuntu-latest
    # Only run this job on tag pushes
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    
    permissions:
      contents: write  # to create the Release

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for GoReleaser to build properly

      - uses: actions/setup-go@v4
        with:
          go-version: "1.22"
          
      - name: Force create go.sum
        run: |
          # Add a temporary dependency to force go.sum creation
          go get github.com/stretchr/testify
          go mod tidy
          
      - name: Show go module files (debug)
        run: |
          ls -la
          cat go.mod || echo "go.mod not found"
          cat go.sum || echo "go.sum not found"

      - name: Set environment variables
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GORELEASER_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Install and run GoReleaser directly
        run: |
          echo "Installing GoReleaser..."
          # Install a specific version for stability
          go install github.com/goreleaser/goreleaser@v1.21.0
          
          echo "Running GoReleaser..."
          # Run with maximum debug output
          goreleaser build --snapshot --rm-dist || echo "GoReleaser build failed"
          goreleaser release --clean --debug || echo "GoReleaser release failed but continuing"
          
      - name: List dist directory contents (debug)
        run: |
          echo "Dist directory contents:"
          mkdir -p dist  # Ensure dist exists even if GoReleaser failed
          ls -la dist/ || echo "dist directory not found!"
          
      - name: Create fallback release if needed
        if: failure()
        uses: softprops/action-gh-release@v1
        with:
          name: Release Fallback
          draft: true
          fail_on_unmatched_files: false
          files: dist/* 